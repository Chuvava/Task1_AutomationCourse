using System;
using System.IO;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Unit_test.Tests;
using System.Diagnostics;

namespace Unit_test.Tests
{
    [TestClass]
    public class PenTests
    {
        public TestContext TestContext { get; set; }
        
        [TestMethod]
        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.XML",
            "testData.xml",
            "Test1",
            DataAccessMethod.Sequential)]
        public void isWork_inkContainerEquals1000_TrueReturned()
        {
            int ink = Convert.ToInt32(TestContext.DataRow["ink"]);
            bool expectedBool = Convert.ToBoolean(TestContext.DataRow["expectedBool"]);
            Pen pen = new Pen(ink);            
            bool actual = pen.isWork();
            Assert.AreEqual(expectedBool, actual);
        }

        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.XML",
            "testData.xml",
            "Test2",
            DataAccessMethod.Sequential)]
        [TestMethod]
        public void isWork_inkContainerEquals0OrNegative_FalseReturned()
        {
            int ink = Convert.ToInt32(TestContext.DataRow["ink"]);
            Pen pen = new Pen(ink);
            bool expectedBool = Convert.ToBoolean(TestContext.DataRow["expectedBool"]);
            //act
            bool actual = pen.isWork();
            //assert
            Assert.AreEqual(expectedBool, actual);
        }

        [TestMethod]
        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.XML",
            "testData.xml",
            "Test3",
            DataAccessMethod.Sequential)]
        public void write_isWorkReturnedFalse_EmptyReturned()
        {
            int ink = Convert.ToInt32(TestContext.DataRow["ink"]);
            Pen pen = new Pen(ink);
            string expectedWord = Convert.ToString(TestContext.DataRow["expectedWord"]);
            string word = Convert.ToString(TestContext.DataRow["word"]);
            string actual = pen.write(word);
            Assert.AreEqual(expectedWord, actual);
        }

        [TestMethod]
        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.XML",
            "testData.xml",
            "Test4",
            DataAccessMethod.Sequential)]
        public void write_WordLengthEquals10_WordReturned()
        {
            int ink = Convert.ToInt32(TestContext.DataRow["ink"]);
            Pen pen = new Pen(ink);
            string expectedWord = Convert.ToString(TestContext.DataRow["expectedWord"]);
            string word = Convert.ToString(TestContext.DataRow["word"]);
            string actual = pen.write(word);
            Assert.AreEqual(expectedWord, actual);
        }

        [TestMethod]
        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.XML",
            "testData.xml",
            "Test5",
            DataAccessMethod.Sequential)]
        public void write_inkEquals5AndWordLength10_01234Returned()
        {
            int ink = Convert.ToInt32(TestContext.DataRow["ink"]);
            Pen pen = new Pen(ink);
            string word = Convert.ToString(TestContext.DataRow["word"]);
            string expectedWord = Convert.ToString(TestContext.DataRow["expectedWord"]);
            string actual = pen.write(word);
            Assert.AreEqual(expectedWord, actual);
        }

        [TestMethod]
        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.XML",
            "testData.xml",
            "Test6",
            DataAccessMethod.Sequential)]
        public void getColor_DefaultColor_BlueReturned()
        {
            int ink = Convert.ToInt32(TestContext.DataRow["ink"]);
            Pen pen = new Pen(ink);
            string expectedColor = Convert.ToString(TestContext.DataRow["expectedColor"]);
            string actual = pen.getColor();
            Assert.AreEqual(expectedColor, actual);
        }

        [TestMethod]
        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.XML",
            "testData.xml",
            "Test7",
            DataAccessMethod.Sequential)]
        public void getColor_ColorIsYellow_YellowReturned()
        {            
            int ink = Convert.ToInt32(TestContext.DataRow["ink"]);
            double size = Convert.ToDouble(TestContext.DataRow["size"]);
            string color = Convert.ToString(TestContext.DataRow["color"]);
            Pen pen = new Pen(ink, size, color);
            string expectedColor = Convert.ToString(TestContext.DataRow["expectedColor"]);
            string actual = pen.getColor();
            Assert.AreEqual(expectedColor, actual, "getColor() must return {0}", expectedColor); //getColor must return YELLOW
        }

        [TestMethod]
        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.XML",
            "testData.xml",
            "Test8910",
            DataAccessMethod.Sequential)]
        public void Pen_ConstructorWithOneParameter_PenIsNotNull()
        {           
            int ink = Convert.ToInt32(TestContext.DataRow["ink"]);
            Pen pen = new Pen(ink);
            Assert.IsNotNull(pen);
        }

        [TestMethod]
        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.XML",
            "testData.xml",
            "Test8910",
            DataAccessMethod.Sequential)]
        public void Pen_ConstructorWithTwoParameters_PenIsNotNull()
        {
            int ink = Convert.ToInt32(TestContext.DataRow["ink"]);
            double size = Convert.ToDouble(TestContext.DataRow["size"]);
            Pen pen = new Pen(ink, size);
            Assert.IsNotNull(pen);
        }

        [TestMethod]
        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.XML",
            "testData.xml",
            "Test8910",
            DataAccessMethod.Sequential)]
        public void Pen_ConstructorWithThreeParameters_PenIsNotNull()
        {
            int ink = Convert.ToInt32(TestContext.DataRow["ink"]);
            double size = Convert.ToDouble(TestContext.DataRow["size"]);
            string color = Convert.ToString(TestContext.DataRow["color"]);
            Pen pen = new Pen(ink, size, color);
            Assert.IsNotNull(pen);                                    
        }

        [TestMethod]
        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.XML",
            "testData.xml",
            "Test11",
            DataAccessMethod.Sequential)]
        public void write_Size15ink100WordLength10_partOfWordFail()
        {
            int ink = Convert.ToInt32(TestContext.DataRow["ink"]);
            double size = Convert.ToDouble(TestContext.DataRow["size"]);
            string word = Convert.ToString(TestContext.DataRow["word"]);
            Pen pen = new Pen(ink, size);
            try
            { string partOfWord = pen.write(word); }
            catch(Exception e)
            {
                Assert.Fail(e.Message);
            }          
        }
        
        [TestMethod]
        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.XML",
            "testData.xml",
            "Test12",
            DataAccessMethod.Sequential)]
        public void getColor_ColorIsBlueLower_blueReturned()
        {            
            int ink = Convert.ToInt32(TestContext.DataRow["ink"]);
            double size = Convert.ToDouble(TestContext.DataRow["size"]);
            string color = Convert.ToString(TestContext.DataRow["color"]);
            Pen pen = new Pen(ink, size, color);
            string expectedColor = Convert.ToString(TestContext.DataRow["expectedColor"]);
            string actual = pen.getColor();
            Assert.AreEqual(expectedColor, actual, "Color must be '{0}'", color); 
        }

        [TestMethod]
        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.XML",
            "testData.xml",
            "Test13",
            DataAccessMethod.Sequential)]
        public void write_SizeIs0_WordIsEmpty()
        {
            int ink = Convert.ToInt32(TestContext.DataRow["ink"]);
            double size = Convert.ToDouble(TestContext.DataRow["size"]);
            string word = Convert.ToString(TestContext.DataRow["word"]);
            string expectedWord = Convert.ToString(TestContext.DataRow["expectedWord"]);
            Pen pen = new Pen(ink, size);
            string actualWord = pen.write(word);
            Assert.AreEqual(expectedWord, actualWord, "Pen shouldn't write when size is 0");
        }

        [TestMethod]
        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.XML",
            "testData.xml",
            "Test14",
            DataAccessMethod.Sequential)]
        public void write_SizeIsNegative_WordIsEmpty()
        {
            int ink = Convert.ToInt32(TestContext.DataRow["ink"]);
            double size = Convert.ToDouble(TestContext.DataRow["size"]);
            string word = Convert.ToString(TestContext.DataRow["word"]);
            string expectedWord = Convert.ToString(TestContext.DataRow["expectedWord"]);
            Pen pen = new Pen(ink, size);
            string actualWord = pen.write(word);
            Assert.AreEqual(expectedWord, actualWord, "Pen shouldn't write when size is negative");
        }
        
        [TestMethod]
        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.XML",
            "testData.xml",
            "Test15",
            DataAccessMethod.Sequential)]
        public void doSomethingElse_DefaultColor_WriteBlue()
        {
            int ink = Convert.ToInt32(TestContext.DataRow["ink"]);
            Pen pen = new Pen(ink);
            TextWriter writer = File.CreateText("test.txt");
            var traceListener = new TextWriterTraceListener(writer);
            Debug.Listeners.Add(traceListener);
            pen.doSomethingElse();
            FileInfo file = new FileInfo("test.txt");
            traceListener.Close();
            writer.Close();
            Debug.Flush();
            StreamReader reader = file.OpenText();
            string result = reader.ReadLine();
            reader.Close();
            file.Delete();
            Assert.AreEqual("BLUE", result);                        
        }

    }
}
