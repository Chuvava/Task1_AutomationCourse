using System;
using System.IO;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Diagnostics;


namespace Unit_test.Tests
{
    [TestClass]
    public class PenTests
    {
        public TestContext TestContext { get; set; }
        
        [TestMethod]
        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.XML",
            "testData.xml",
            "TestIsWork",
            DataAccessMethod.Sequential)]
        public void IsWork_inkContainerDifferentValues_IfPositiveWorkElseDontWork()
        {
            int ink = Convert.ToInt32(TestContext.DataRow["ink"]);
            bool expectedBool = Convert.ToBoolean(TestContext.DataRow["expectedBool"]);
            Pen pen = new Pen(ink);            
            bool actual = pen.isWork();
            Assert.AreEqual(expectedBool, actual);
        }

        [TestMethod]
        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.XML",
            "testData.xml",
            "TestWriteDefaultSize",
            DataAccessMethod.Sequential)]
        public void Write_DefaultSizeDifferentInk_EqualValues()
        {
            int ink = Convert.ToInt32(TestContext.DataRow["ink"]);
            Pen pen = new Pen(ink);
            string expectedWord = Convert.ToString(TestContext.DataRow["expectedWord"]);
            string word = Convert.ToString(TestContext.DataRow["word"]);
            string actual = pen.write(word);
            Assert.AreEqual(expectedWord, actual);
        }

        [TestMethod]
        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.XML",
            "testData.xml",
            "TestGetColorDefault",
            DataAccessMethod.Sequential)]
        public void GetColor_DefaultColor_BlueReturned()
        {
            int ink = Convert.ToInt32(TestContext.DataRow["ink"]);
            Pen pen = new Pen(ink);
            string expectedColor = Convert.ToString(TestContext.DataRow["expectedColor"]);
            string actual = pen.getColor();
            Assert.AreEqual(expectedColor, actual);
        }

        [TestMethod]
        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.XML",
            "testData.xml",
            "TestGetColorNotDefault",
            DataAccessMethod.Sequential)]
        public void GetColor_ColorIsNotDefault_ReturneNotDefaultColor()
        {            
            int ink = Convert.ToInt32(TestContext.DataRow["ink"]);
            double size = Convert.ToDouble(TestContext.DataRow["size"]);
            string color = Convert.ToString(TestContext.DataRow["color"]);
            Pen pen = new Pen(ink, size, color);
            string expectedColor = Convert.ToString(TestContext.DataRow["expectedColor"]);
            string actual = pen.getColor();
            Assert.AreEqual(expectedColor, actual, "getColor() must return {0}", expectedColor); 
        }

        [TestMethod]
        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.XML",
            "testData.xml",
            "TestPenConstructor",
            DataAccessMethod.Sequential)]
        public void Pen_ConstructorWithOneParameter_PenIsNotNull()
        {           
            int ink = Convert.ToInt32(TestContext.DataRow["ink"]);
            Pen pen = new Pen(ink);
            Assert.IsNotNull(pen);
        }

        [TestMethod]
        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.XML",
            "testData.xml",
            "TestPenConstructor",
            DataAccessMethod.Sequential)]
        public void Pen_ConstructorWithTwoParameters_PenIsNotNull()
        {
            int ink = Convert.ToInt32(TestContext.DataRow["ink"]);
            double size = Convert.ToDouble(TestContext.DataRow["size"]);
            Pen pen = new Pen(ink, size);
            Assert.IsNotNull(pen);
        }

        [TestMethod]
        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.XML",
            "testData.xml",
            "TestPenConstructor",
            DataAccessMethod.Sequential)]
        public void Pen_ConstructorWithThreeParameters_PenIsNotNull()
        {
            int ink = Convert.ToInt32(TestContext.DataRow["ink"]);
            double size = Convert.ToDouble(TestContext.DataRow["size"]);
            string color = Convert.ToString(TestContext.DataRow["color"]);
            Pen pen = new Pen(ink, size, color);
            Assert.IsNotNull(pen);                                    
        }

        [TestMethod]
        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.XML",
            "testData.xml",
            "TestSizeAndLengthMoreThanInk",
            DataAccessMethod.Sequential)]
        public void Write_Size15ink100WordLength10_partOfWordFail()
        {
            int ink = Convert.ToInt32(TestContext.DataRow["ink"]);
            double size = Convert.ToDouble(TestContext.DataRow["size"]);
            string word = Convert.ToString(TestContext.DataRow["word"]);
            Pen pen = new Pen(ink, size);
            try
            { string partOfWord = pen.write(word); }
            catch(Exception e)
            {
                Assert.Fail(e.Message);
            }          
        }

        [TestMethod]
        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.XML",
            "testData.xml",
            "TestSizeIsNullOrNegative",
            DataAccessMethod.Sequential)]
        public void Write_SizeIs0OrNegative_WordIsEmpty()
        {
            int ink = Convert.ToInt32(TestContext.DataRow["ink"]);
            double size = Convert.ToDouble(TestContext.DataRow["size"]);
            string word = Convert.ToString(TestContext.DataRow["word"]);
            string expectedWord = Convert.ToString(TestContext.DataRow["expectedWord"]);
            Pen pen = new Pen(ink, size);
            string actualWord = pen.write(word);
            Assert.AreEqual(expectedWord, actualWord, "Pen shouldn't write when size is 0 or negative");
        }
        
        [TestMethod]
        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.XML",
            "testData.xml",
            "TestDoSomethingElse",
            DataAccessMethod.Sequential)]
        public void DoSomethingElse_DefaultColor_WriteBlue()
        {
            int ink = Convert.ToInt32(TestContext.DataRow["ink"]);
            Pen pen = new Pen(ink);
            TextWriter writer = File.CreateText("test.txt");
            var traceListener = new TextWriterTraceListener(writer);
            Debug.Listeners.Add(traceListener);
            pen.doSomethingElse();
            FileInfo file = new FileInfo("test.txt");
            traceListener.Close();
            writer.Close();
            Debug.Flush();
            StreamReader reader = file.OpenText();
            string result = reader.ReadLine();
            reader.Close();
            file.Delete();
            Assert.AreEqual("BLUE", result);                        
        }

        [TestMethod]
        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.XML",
            "testData.xml",
            "TestTextWithSpaces",
            DataAccessMethod.Sequential)]
        public void Write_InWordMoreSpacesThanInk_ReturnOriginalWord()
        {
            int ink = Convert.ToInt32(TestContext.DataRow["ink"]);
            string word = Convert.ToString(TestContext.DataRow["word"]);
            string expectedWord = Convert.ToString(TestContext.DataRow["expectedWord"]);
            Pen pen = new Pen(ink);
            string actualWord = pen.write(word);
            Assert.AreEqual(actualWord, expectedWord, "Texts must be equal");
        }

        [TestMethod]
        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.XML",
            "testData.xml",
            "TestSizeMoreThanDefaultPositive",
            DataAccessMethod.Sequential)]
        public void Write_SizeMoreThanDefault_ReturnOriginalWord()
        {
            int ink = Convert.ToInt32(TestContext.DataRow["ink"]);
            string word = Convert.ToString(TestContext.DataRow["word"]);
            double size = Convert.ToDouble(TestContext.DataRow["size"]);
            string expectedWord = word;
            Pen pen = new Pen(ink, size);
            Assert.AreEqual(expectedWord, pen.write(word));
        }

        [TestMethod]
        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.XML",
            "testData.xml",
            "TestPenConstructorWithNegativeValues",
            DataAccessMethod.Sequential)]
        public void Pen_ConstructorWithNegativeValue_ThrowException()
        {
            int ink = Convert.ToInt32(TestContext.DataRow["ink"]);
            double size = Convert.ToDouble(TestContext.DataRow["size"]);
            Pen pen = new Pen(ink, size);
            Assert.Fail("Pen constructor with negative or null values of ink and size must throw Exception" +
                        "or values must initialize by default");
        }
    }
}
